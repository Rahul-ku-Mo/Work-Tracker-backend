generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                   @id @default(uuid())
  email                    String                   @unique
  password                 String?
  name                     String?
  username                 String?                  @unique
  imageUrl                 String?
  createdAt                DateTime                 @default(now())
  phoneNumber              String?
  state                    String?
  address                  String?
  zipCode                  String?
  company                  String?
  department               String?
  isPaidUser               Boolean?                 @default(false)
  isActive                 Boolean?                 @default(true)
  role                     AppRole                  @default(USER)
  updatedAt                DateTime                 @updatedAt
  paddleCustomerId         String?                  @unique
  efficiency               Int?
  AiConversation           AiConversation[]
  attachments              Attachment[]             @relation("UserAttachments")
  createdCards             Card[]                   @relation("cardCreator")
  resolvedComments         Comment[]                @relation("CommentResolver")
  comments                 Comment[]
  imageUploads             ImageUpload[]            @relation("ImageUploads")
  notes                    Note[]                   @relation("UserNotes")
  noteCategories           NoteCategory[]           @relation("UserNoteCategories")
  receivedNotification     Notification[]           @relation("receiver")
  sentNotification         Notification[]           @relation("sender")
  performanceMetrics       PerformanceMetric[]      @relation("userMetrics")
  projectsLed              Project[]                @relation("ProjectLead")
  projectsMember           ProjectMember[]
  timeEntries              TimeEntry[]
  performanceHistory       UserPerformanceHistory[] @relation("userPerformanceHistory")
  sentWorkspaceInvitations WorkspaceInvitation[]    @relation("WorkspaceInvitationSender")
  workspaces               WorkspaceUser[]
  mentions                 Mention[]
  subscription             Subscription?
  assignedCards            Card[]                   @relation("assignee")
  teamMemberships          TeamMember[]
}

model Team {
  id                   String                    @id @default(uuid())
  name                 String
  joinCode             String?                   @unique
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  teamImageUrl         String?
  performanceMetrics   PerformanceMetric[]       @relation("teamMetrics")
  projects             Project[]                 @relation("TeamProjects")
  sprints              Sprint[]
  performanceSnapshots TeamPerformanceSnapshot[] @relation("teamSnapshots")
  teamMembers          TeamMember[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
}

model Workspace {
  id          Int                   @id @default(autoincrement())
  title       String
  slug        String                @unique
  projectId   String
  colorId     String
  colorValue  String
  colorName   String
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  nextCardNum Int                   @default(1)
  prefix      String                @unique
  columns     Column[]
  labels      Label[]               @relation("WorkspaceLabels")
  sprints     Sprint[]
  project     Project               @relation("ProjectWorkspaces", fields: [projectId], references: [id], onDelete: Cascade)
  invitations WorkspaceInvitation[]
  members     WorkspaceUser[]

  @@index([projectId])
}

model WorkspaceUser {
  id          String        @id @default(uuid())
  workspaceId Int
  userId      String
  role        WorkspaceRole @default(MEMBER)
  isFavorite  Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model WorkspaceInvitation {
  id          String        @id @default(uuid())
  email       String
  workspaceId Int
  role        WorkspaceRole @default(MEMBER)
  token       String        @unique
  invitedBy   String
  expiresAt   DateTime
  usedAt      DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  inviter     User          @relation("WorkspaceInvitationSender", fields: [invitedBy], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
}

model Column {
  id          Int       @id @default(autoincrement())
  order       Int
  title       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId Int
  cards       Card[]
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Project {
  id          String          @id @default(uuid())
  title       String
  slug        String          @unique
  summary     String?
  description String?
  startDate   DateTime?
  targetDate  DateTime?
  priority    String?
  status      String          @default("Not Started")
  teamId      String
  leadId      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  milestones  Milestone[]
  workspaces  Workspace[]     @relation("ProjectWorkspaces")
  lead        User?           @relation("ProjectLead", fields: [leadId], references: [id])
  team        Team            @relation("TeamProjects", fields: [teamId], references: [id], onDelete: Cascade)
  members     ProjectMember[]

  @@index([teamId])
  @@index([leadId])
}

model Milestone {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("INCOMPLETE")
  targetDate  DateTime?
  notes       String?
  order       Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model ProjectMember {
  id        String      @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Card {
  id              Int          @id @default(autoincrement())
  title           String
  slug            String       @unique
  order           Int
  description     String?
  columnId        Int
  attachments     String[]
  priority        String?
  storyPoints     Int?         @default(0)
  createdAt       DateTime     @default(now())
  dueDate         DateTime?
  updatedAt       DateTime     @updatedAt
  creatorId       String?
  estimatedHours  Float?
  actualHours     Float?
  completedAt     DateTime?
  isOnTime        Boolean?
  sprintId        String?
  workspaceNumber Int
  cardAttachments Attachment[]
  column          Column       @relation(fields: [columnId], references: [id], onDelete: Cascade)
  creator         User?        @relation("cardCreator", fields: [creatorId], references: [id])
  sprint          Sprint?      @relation(fields: [sprintId], references: [id])
  comments        Comment[]
  timeEntries     TimeEntry[]
  labels          Label[]      @relation("CardToLabel")
  tags            Tag[]        @relation("CardToTag")
  assignees       User[]       @relation("assignee")

  @@unique([columnId, workspaceNumber], name: "card_workspace_number")
  @@index([sprintId])
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  cardId          Int
  userId          String
  createdAt       DateTime  @default(now())
  isResolved      Boolean   @default(false)
  parentCommentId Int?
  resolvedAt      DateTime?
  resolvedById    String?
  updatedAt       DateTime  @updatedAt
  card            Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies         Comment[] @relation("CommentReplies")
  resolvedBy      User?     @relation("CommentResolver", fields: [resolvedById], references: [id])
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([userId])
  @@index([parentCommentId])
  @@index([isResolved])
}

model Notification {
  id          Int       @id @default(autoincrement())
  senderId    String
  receiverId  String
  message     String
  metadata    String?
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  contentId   String?
  contentType String?
  readAt      DateTime?
  title       String?
  type        String?
  receiver    User      @relation("receiver", fields: [receiverId], references: [id])
  sender      User      @relation("sender", fields: [senderId], references: [id])

  @@index([receiverId])
  @@index([isRead])
  @@index([type])
  @@index([contentType, contentId])
}

model AiConversation {
  id        String                  @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  user      User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  AiConversationMessage[]
}

model AiConversationMessage {
  id               String         @id @default(uuid())
  content          String
  aiConversationId String
  role             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  aiConversation   AiConversation @relation(fields: [aiConversationId], references: [id], onDelete: Cascade)
}

model Sprint {
  id                   String                    @id @default(uuid())
  name                 String
  startDate            DateTime
  endDate              DateTime
  plannedPoints        Float
  teamId               String
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt
  completedPoints      Float?
  efficiency           Float?
  workspaceId          Int
  cards                Card[]
  performanceMetrics   PerformanceMetric[]       @relation("sprintMetrics")
  team                 Team                      @relation(fields: [teamId], references: [id])
  workspace            Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  performanceSnapshots TeamPerformanceSnapshot[]

  @@index([teamId])
  @@index([workspaceId])
}

model TimeEntry {
  id             String    @id @default(uuid())
  userId         String
  cardId         Int
  startTime      DateTime
  endTime        DateTime?
  lastResumeTime DateTime?
  totalDuration  Int       @default(0)
  isPaused       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  card           Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([cardId])
}

model Label {
  id          String    @id @default(uuid())
  name        String
  color       String?
  workspaceId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspace   Workspace @relation("WorkspaceLabels", fields: [workspaceId], references: [id], onDelete: Cascade)
  cards       Card[]    @relation("CardToLabel")

  @@unique([name, workspaceId])
  @@index([workspaceId])
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]   @relation("CardToTag")
}

model PerformanceMetric {
  id            String     @id @default(uuid())
  date          DateTime
  metricType    MetricType
  value         Float
  target        Float?
  previousValue Float?
  notes         String?
  userId        String?
  teamId        String?
  sprintId      String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  sprint        Sprint?    @relation("sprintMetrics", fields: [sprintId], references: [id])
  team          Team?      @relation("teamMetrics", fields: [teamId], references: [id])
  user          User?      @relation("userMetrics", fields: [userId], references: [id])

  @@index([userId])
  @@index([teamId])
  @@index([sprintId])
  @@index([date])
  @@index([metricType])
}

model TeamPerformanceSnapshot {
  id         String   @id @default(uuid())
  teamId     String
  date       DateTime
  velocity   Float
  sprintId   String?
  createdAt  DateTime @default(now())
  efficiency Float
  sprint     Sprint?  @relation(fields: [sprintId], references: [id])
  team       Team     @relation("teamSnapshots", fields: [teamId], references: [id])

  @@index([teamId])
  @@index([date])
}

model UserPerformanceHistory {
  id         String   @id @default(uuid())
  userId     String
  date       DateTime
  createdAt  DateTime @default(now())
  efficiency Int
  velocity   Float
  user       User     @relation("userPerformanceHistory", fields: [userId], references: [id])

  @@index([userId])
  @@index([date])
}

model Subscription {
  id                   String           @id @default(uuid())
  userId               String           @unique
  plan                 SubscriptionPlan
  status               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  paddleSubscriptionId String?          @unique
  cancelAtPeriodEnd    Boolean          @default(false)
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([paddleSubscriptionId])
  @@map("subscriptions")
}

model ImageUpload {
  id        String   @id @default(uuid())
  userId    String
  s3Key     String
  fileName  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  user      User     @relation("ImageUploads", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model Attachment {
  id        String   @id @default(uuid())
  cardId    Int
  userId    String
  s3Key     String
  fileName  String
  fileSize  Int
  mimeType  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user      User     @relation("UserAttachments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([cardId])
  @@index([userId])
  @@index([createdAt])
}

model NoteCategory {
  id         String   @id @default(uuid())
  name       String
  slug       String
  hoverColor String?
  userId     String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  notes      Note[]
  user       User     @relation("UserNoteCategories", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, slug])
  @@index([userId])
  @@index([slug])
}

model Note {
  id          String       @id @default(uuid())
  title       String
  content     String
  categoryId  String
  userId      String
  icon        String?
  iconColor   String?
  emoji       String?
  isCompleted Boolean      @default(false)
  isPublic    Boolean      @default(false)
  priority    Int?
  tags        String[]
  coverType   String?
  coverValue  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    NoteCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user        User         @relation("UserNotes", fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId])
  @@index([userId])
  @@index([createdAt])
  @@index([isPublic])
}

model Mention {
  id            String   @id @default(cuid())
  mentionedId   String
  contentType   String
  contentId     String
  createdAt     DateTime @default(now())
  mentionedUser User     @relation(fields: [mentionedId], references: [id], onDelete: Cascade)

  @@unique([mentionedId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([contentId])
  @@map("mentions")
}

enum AppRole {
  ADMIN
  USER
}

enum WorkspaceRole {
  ADMIN
  MEMBER
}

enum TeamRole {
  ADMIN
  MEMBER
}

enum ProjectRole {
  LEAD
  MEMBER
  OBSERVER
}

enum Message {
  JOIN
  LEAVE
  CARD_ASSIGNED
  CARD_UPDATED
  CARD_COMPLETED
  CARD_COMMENTED
  CARD_DUE_SOON
  CARD_OVERDUE
  MENTION
}

enum MetricType {
  VELOCITY
  COMPLETION_RATE
  AVERAGE_TIME
  EFFICIENCY
  PLANNING_ACCURACY
  REVIEW_EFFICIENCY
  TIME_DISTRIBUTION
  PEAK_PERFORMANCE
  TEAM_VELOCITY
  BURNDOWN_RATE
  COLLABORATION_SCORE
}

enum SubscriptionPlan {
  FREE
  PRO
  TEAM
  ENTERPRISE
}
