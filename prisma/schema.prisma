// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppRole {
  ADMIN
  USER
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String?
  name                 String?
  username             String?        @unique
  boards               BoardUser[] // Changed: Now connects through BoardUser
  comments             Comment[]
  imageUrl             String?
  createdAt            DateTime       @default(now())
  phoneNumber          String?
  state                String?
  address              String?
  zipCode              String?
  company              String?
  department           String?
  isPaidUser           Boolean?       @default(false)
  role                 AppRole        @default(USER)
  updatedAt            DateTime       @updatedAt
  receivedNotification Notification[] @relation("receiver")
  sentNotification     Notification[] @relation("sender")
  assignedCards        Card[]         @relation("assignee")
  createdCards         Card[]         @relation("cardCreator")
  Board                Board[]
}

model Board {
  id            Int         @id @default(autoincrement())
  title         String
  userId        String // Creator of the board
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  members       BoardUser[] // New: Board members
  columns       Column[]
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  imageLinkHTML String
  imageUserName String
}

// New model to manage board access
model BoardUser {
  id        String    @id @default(uuid())
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId   Int
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      BoardRole @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([boardId, userId])
}

// New enum for board-specific roles
enum BoardRole {
  ADMIN
  MEMBER
}

model Column {
  id        Int      @id @default(autoincrement())
  order     Int
  title     String
  boardId   Int
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          Int       @id @default(autoincrement())
  title       String
  order       Int
  description String?
  columnId    Int
  column      Column    @relation(fields: [columnId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments    Comment[]
  labels      Label[]
  attachments String[]
  priority    String?
  assignees   User[]    @relation("assignee")
  createdAt   DateTime  @default(now())
  dueDate     DateTime?
  updatedAt   DateTime  @updatedAt
  creator     User?     @relation("cardCreator", fields: [creatorId], references: [id])
  creatorId   String?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  cardId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Label {
  id        Int      @id @default(autoincrement())
  name      String
  color     String
  cardId    Int
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now())
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   String
  sender     User     @relation("sender", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("receiver", fields: [receiverId], references: [id])
  message    Message
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Message {
  JOIN
  LEAVE
}
